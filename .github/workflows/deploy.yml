name: deploy

on:
  pull_request:
    branches: [main]
    types: [closed]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '22.16.0'

jobs:
  deploy:
    name: deploy-to-production
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Load Environment Variables
        run: cp .vercel/.env.production.local .env

      - name: Debug Environment Variables
        run: |
          echo "Checking environment variables..."
          echo "NODE_ENV: $NODE_ENV"
          echo "DATABASE_URL exists: $([ -n "$DATABASE_URL" ] && echo "YES" || echo "NO")"
          echo "Environment file contents:"
          cat .env | grep -v -E "(SECRET|KEY|TOKEN|PASSWORD)" | head -10

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Database Migrations
        run: npx prisma migrate deploy

      - name: Test Database Connection
        run: |
          echo "Testing database connection..."
          npx prisma db execute --stdin <<< "SELECT 1;" || {
            echo "Database connection failed!"
            exit 1
          }
          
      - name: Seed Database (if needed)
        run: |
          echo "Ensuring database has required data..."
          npm run db:seed || echo "Seed completed or not needed"

      - name: Build Project Artifacts
        run: |
          echo "Building project with database access..."
          # Set environment for build process
          export NODE_ENV=production
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: echo "url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ï¿½ Live URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**ðŸ“… Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
